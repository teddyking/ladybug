// This file was generated by counterfeiter
package printfakes

import (
	"sync"

	"github.com/teddyking/ladybug/print"
)

type FakePrinter struct {
	PrintContainersStub        func(result print.ContainersResult) error
	printContainersMutex       sync.RWMutex
	printContainersArgsForCall []struct {
		result print.ContainersResult
	}
	printContainersReturns struct {
		result1 error
	}
	PrintInfoStub        func(result print.InfoResult) error
	printInfoMutex       sync.RWMutex
	printInfoArgsForCall []struct {
		result print.InfoResult
	}
	printInfoReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrinter) PrintContainers(result print.ContainersResult) error {
	fake.printContainersMutex.Lock()
	fake.printContainersArgsForCall = append(fake.printContainersArgsForCall, struct {
		result print.ContainersResult
	}{result})
	fake.recordInvocation("PrintContainers", []interface{}{result})
	fake.printContainersMutex.Unlock()
	if fake.PrintContainersStub != nil {
		return fake.PrintContainersStub(result)
	} else {
		return fake.printContainersReturns.result1
	}
}

func (fake *FakePrinter) PrintContainersCallCount() int {
	fake.printContainersMutex.RLock()
	defer fake.printContainersMutex.RUnlock()
	return len(fake.printContainersArgsForCall)
}

func (fake *FakePrinter) PrintContainersArgsForCall(i int) print.ContainersResult {
	fake.printContainersMutex.RLock()
	defer fake.printContainersMutex.RUnlock()
	return fake.printContainersArgsForCall[i].result
}

func (fake *FakePrinter) PrintContainersReturns(result1 error) {
	fake.PrintContainersStub = nil
	fake.printContainersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) PrintInfo(result print.InfoResult) error {
	fake.printInfoMutex.Lock()
	fake.printInfoArgsForCall = append(fake.printInfoArgsForCall, struct {
		result print.InfoResult
	}{result})
	fake.recordInvocation("PrintInfo", []interface{}{result})
	fake.printInfoMutex.Unlock()
	if fake.PrintInfoStub != nil {
		return fake.PrintInfoStub(result)
	} else {
		return fake.printInfoReturns.result1
	}
}

func (fake *FakePrinter) PrintInfoCallCount() int {
	fake.printInfoMutex.RLock()
	defer fake.printInfoMutex.RUnlock()
	return len(fake.printInfoArgsForCall)
}

func (fake *FakePrinter) PrintInfoArgsForCall(i int) print.InfoResult {
	fake.printInfoMutex.RLock()
	defer fake.printInfoMutex.RUnlock()
	return fake.printInfoArgsForCall[i].result
}

func (fake *FakePrinter) PrintInfoReturns(result1 error) {
	fake.PrintInfoStub = nil
	fake.printInfoReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printContainersMutex.RLock()
	defer fake.printContainersMutex.RUnlock()
	fake.printInfoMutex.RLock()
	defer fake.printInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ print.Printer = new(FakePrinter)
